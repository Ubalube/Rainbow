package me.xboxsignout.rainbow;

import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
import org.bukkit.event.entity.EntityEvent;
import org.bukkit.plugin.java.JavaPlugin;

public class Main extends JavaPlugin implements Listener
{
	Settings settings = Settings.getInstance();
	//private OperatorSelect menu;
	private Matchmaking match;
	private ArenaModify modify;
	
	HashMap<Player, Boolean> arena = new HashMap<Player, Boolean>();
	HashMap<Player, Teams> gameteam = new HashMap<Player, Teams>();
	
	@Override
	public void onEnable() {
		//menu = new OperatorSelect(this);
		
		settings.setup(this);
		match = new Matchmaking(this, settings, this);
		modify = new ArenaModify(this, settings);
		getLogger().info("Craft Six Siege has been enabled!");
		Bukkit.getServer().getPluginManager().registerEvents(this, this);
		getLogger().info("Craft Six Siege listeners ready!");
		getLogger().info("Craft Six Siege commands ready!");
	}
	
	public void joinArena(Player player, boolean inArena)
	{
		arena.put(player, inArena);
	}
	
	public void joinTeam(Player p, Teams team)
	{
		gameteam.put(p, team);
	}
	
	public void joinRandomTeam(Player p)
	{
		Random rand = new Random();
		int teamRand = rand.nextInt(2);
		if(teamRand == 1)
		{
			gameteam.put(p, Teams.BLUE);
			return;
		}
		if(teamRand == 2)
		{
			gameteam.put(p, Teams.RED);
			return;
		}
		gameteam.put(p, Teams.RED);
	}
	
	public Teams getTeam(Player p)
	{
		return gameteam.get(p);
	}
	
	public boolean inArena(Player p)
	{
		return arena.get(p);
	}
	
	public void spawnBombs(String arena, World w)
	{
		Random rand = new Random();
		int site = rand.nextInt(2);
		if(site == 1)
		{
			double x = settings.getData().getDouble("arenas." + arena + ".bomba.x");
			double y = settings.getData().getDouble("arenas." + arena + ".bomba.y");
			double z = settings.getData().getDouble("arenas." + arena + ".bomba.z");
			Location A = new Location(w, x, y, z);
			w.spawnEntity(A, EntityType.CHICKEN).setCustomName("Bomb");
			return;
		}
		if(site == 2)
		{
			double x = settings.getData().getDouble("arenas." + arena + ".bombb.x");
			double y = settings.getData().getDouble("arenas." + arena + ".bombb.y");
			double z = settings.getData().getDouble("arenas." + arena + ".bombb.z");
			Location A = new Location(w, x, y, z);
			w.spawnEntity(A, EntityType.CHICKEN).setCustomName("Bomb");
			return;
		}
		
		double x = settings.getData().getDouble("arenas." + arena + ".bombb.x");
		double y = settings.getData().getDouble("arenas." + arena + ".bombb.y");
		double z = settings.getData().getDouble("arenas." + arena + ".bombb.z");
		Location A = new Location(w, x, y, z);
		w.spawnEntity(A, EntityType.CHICKEN).setCustomName("Bomb");
		
	}
	
	@Override
	public void onDisable() {
		getLogger().info("Craft Six Siege has been disabled!");
	}
	
	public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) 
	{
        if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "The console cannot use Medic!");
                return true;
        }
       
        Player p = (Player) sender;
       
        if (cmd.getName().equalsIgnoreCase("join")) 
        {
        	p.sendMessage(ChatColor.GREEN + "UI Opened");
        	match.show(p);
        }
        
        if (cmd.getName().equalsIgnoreCase("spawnbomb")) 
        {
        	if(args.length == 0)
        	{
        		p.sendMessage(ChatColor.RED + "Please specify an arena you would like to modify!");
        		return true;
        	}
        	spawnBombs(args[0], p.getWorld());
        	p.sendMessage("Bomb Spawned!");
        }
        
        if (cmd.getName().equalsIgnoreCase("leave")) 
        {
        	if(inArena(p))
        	{
        		joinArena(p, false);
        		p.sendMessage("Left Game");
        	}
        	else
        	{
        		p.sendMessage("You need to be in a game to leave one!");
        	}
        }
        
        if(cmd.getName().equalsIgnoreCase("info"))
        {
        	p.sendMessage("Your Stats <!>");
        	if(inArena(p))
        	{
            	p.sendMessage(ChatColor.GREEN + "In Round");
        	}
        	else
        	{
        		p.sendMessage(ChatColor.GREEN + "Not In Round");
        	}
        	p.sendMessage(gameteam.get(p).toString());
        }
        
        if(cmd.getName().equalsIgnoreCase("modifyarena"))
        {
        	if(args.length == 0)
        	{
        		p.sendMessage(ChatColor.RED + "Please specify an arena you would like to modify!");
        		return true;
        	}
        	
        	if (settings.getData().getConfigurationSection("arenas." + args[0]) == null) {
                p.sendMessage(ChatColor.RED + "Arena " + args[0] + " does not exist!");
                return true;
        	}
        	
        	modify.show(p, args[0]);
        	
        }
        
        if(cmd.getName().equalsIgnoreCase("activatearena"))
        {
        	if (args.length == 0) 
        	{
                p.sendMessage(ChatColor.RED + "Please specify an arena!");
                return true;
        	}
        	
        	if(!settings.getData().getBoolean("arenas." + args[0] + ".active"))
        	{
        		if(settings.getData().get("arenas." + args[0] + ".bomba.x") != null && 
            			settings.getData().get("arenas." + args[0] + ".bomba.y") != null &&
            			settings.getData().get("arenas." + args[0] + ".bomba.z") != null)
            	{
            		if(settings.getData().get("arenas." + args[0] + ".bombb.x") != null && 
                			settings.getData().get("arenas." + args[0] + ".bombb.y") != null &&
                			settings.getData().get("arenas." + args[0] + ".bombb.z") != null)
            		{
            			settings.getData().set("arenas." + args[0] + ".active", true);
            			settings.saveData();
            			p.sendMessage(ChatColor.GREEN + "Arena " + args[0] + "has been activated and has been added to the playlists!");
            		}
            		else
            		{
            			p.sendMessage(ChatColor.RED + "ERROR! You need to set the Bomb B location!");
            		}
            	}
            	else
        		{
        			p.sendMessage(ChatColor.RED + "ERROR! You need to set the Bomb A location!");
        		}
        	}
        	else
        	{
        		p.sendMessage(ChatColor.RED + "ERROR! This arena is already activated! Type /disablearena <arena> to disable it!");
        	}
        	
        	
        }
        
        if(cmd.getName().equalsIgnoreCase("disablearena"))
        {
        	if (args.length == 0) 
        	{
                p.sendMessage(ChatColor.RED + "Please specify an arena!");
                return true;
        	}
        	
        	if(settings.getData().getBoolean("arenas." + args[0] + ".active"))
        	{
        		settings.getData().set("arenas." + args[0] + ".active", false);
        		settings.saveData();
        		p.sendMessage(ChatColor.GREEN + "Arena " + args[0] + " has been disabled! It has been removed from the playlists.");
        	}
        	else
        	{
        		p.sendMessage(ChatColor.RED + "ERROR! This arena is not activated! Type /activatearena <arena> to activate it.");
        	}
        	
        }
        
        if (cmd.getName().equalsIgnoreCase("setarena")) {
            if (args.length == 0) {
                    p.sendMessage(ChatColor.RED + "Please specify a name!");
                    return true;
            }
            settings.getData().set("arenas." + args[0] + ".world", p.getLocation().getWorld().getName());
            settings.getData().set("arenas." + args[0] + ".x", p.getLocation().getX());
            settings.getData().set("arenas." + args[0] + ".y", p.getLocation().getY());
            settings.getData().set("arenas." + args[0] + ".z", p.getLocation().getZ());
            settings.getData().set("arenas." + args[0] + ".mode", "casual");
            List<String> arena = settings.getData().getStringList("arenalist");
            arena.add(args[0]);
        	settings.getData().set("arenalist", arena);
        	settings.getData().set("arenas." + args[0] + ".active", false);
            settings.saveData();
            p.sendMessage(ChatColor.GREEN + "Set arena " + args[0] + "!");
        }
        
        if (cmd.getName().equalsIgnoreCase("joinarena")) {
            if (args.length == 0) {
                    p.sendMessage(ChatColor.RED + "Please specify a name!");
                    return true;
            }
            if (settings.getData().getConfigurationSection("arenas." + args[0]) == null) {
                    p.sendMessage(ChatColor.RED + "Arena " + args[0] + " does not exist!");
                    return true;
            }
            World w = Bukkit.getServer().getWorld(settings.getData().getString("arenas." + args[0] + ".world"));
            double x = settings.getData().getDouble("arenas." + args[0] + ".x");
            double y = settings.getData().getDouble("arenas." + args[0] + ".y");
            double z = settings.getData().getDouble("arenas." + args[0] + ".z");
            p.teleport(new Location(w, x, y, z));
            p.sendMessage(ChatColor.GREEN + "Joined " + args[0] + "!");
        }
        
        if (cmd.getName().equalsIgnoreCase("delarena")) {
            if (args.length == 0) {
                    p.sendMessage(ChatColor.RED + "Please specify a name!");
                    return true;
            }
            if (settings.getData().getConfigurationSection("arenas." + args[0]) == null) {
                    p.sendMessage(ChatColor.RED + "Arena " + args[0] + " does not exist!");
                    return true;
            }
            List<String> arena = settings.getData().getStringList("arenalist");
            arena.remove(args[0]);
            settings.getData().set("arenas." + args[0], null);
        	settings.getData().set("arenalist", arena);
            settings.saveData();
            p.sendMessage(ChatColor.GREEN + "Removed arena " + args[0] + "!");
        }
        
        return true;
	}
	
	@EventHandler
	public void preventBombDamage(EntityDamageEvent e)
	{
		if(e.getEntityType().equals(EntityType.CHICKEN) && e.getEntity().getCustomName() == "Bomb")
		{
			if(!e.getCause().equals(DamageCause.VOID))
			{
				e.setCancelled(true);
			}
		}
	}
	
	@SuppressWarnings("deprecation")
	@EventHandler
	public void manageBomb(EntityEvent e)
	{
		if(e.getEntityType().equals(EntityType.CHICKEN) && e.getEntity().getCustomName() == "Bomb")
		{
			
			for(Entity ent : e.getEntity().getNearbyEntities(10, 10, 10))
			{
				if(ent instanceof Player)
				{
					Player pla = ((Player) ent);
					if(pla.getScoreboard().getPlayerTeam(pla).getName() == "Blue");
					{
						
					}
				}
			}
			
			e.getEntity().setSilent(true);
		}
	}
	
}
